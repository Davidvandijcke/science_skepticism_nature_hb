ggl$countyFIPS <- str_pad(ggl$countyFIPS, 5, 'left', '0')
ggl <- plyr::join(ggl, pew)
# check whether panel is balanced
testit::assert(dim(unique(ggl, by = c("countyFIPS", "date"))) == dim(ggl))
#ggl <- unique(ggl, by = c("countyState", "date"))
#### Write to File ####
fwrite(ggl,file.path(dataout,"COVID_County.csv"))
#****************************************************************************************************************************************************
# Compiles COUNTY Data from Different Sources into Panel Dataset
# Adam Brzeszinski, Valentin Kecht, David Van Dijcke, Austin Wright
# University of Oxford / University of Michigan / University of Chicago / Bocconi University
# Note: code is mostly written for data frames simply because I hadn't discovered the glory of data table when writing it
#****************************************************************************************************************************************************
#### Prep ####
## Get State Names and Abbreviations
states <- data.frame(Province_State=state.name,state=state.abb) # these are built in datasets
states$state <- as.character(states$state)
#### SafeGraph Foot Traffic Data ####
## Feb
safe <- fread(file.path(dataout,"safeGraph_SDCounty.csv.gz"), drop = "V1")  %>% data.frame()
safe$date <- as.Date(safe$date, "%Y-%m-%d")
## cut the sample
safe <- safe[between(safe$date, "2020-02-01", "2020-04-31"),]
ggl <- safe
ggl <- ggl[!is.na(ggl$state),] # some states missing for some reason
#### Government Response Dataf
gvt <- fread(file.path(datain,"CoronavirusStateTracking_15may_adj.csv"),sep=";")
# fix date (doing this in data table cause more efficient)
vars_date <- c("Date of SOE", "Date of Stay at home", "date of first local stay at home", "Date first business closure")
gvt[, (vars_date) := lapply(.SD, function(x) as.Date(paste(x, "2020"), "%B %d %Y")), .SDcols = vars_date]
gvt <- data.frame(gvt)
colnames(gvt)[colnames(gvt)=="State"] <- "state"
gvt$state <- gsub("[\\(\\)]", "", regmatches(gvt$state, gregexpr("\\(.*?\\)", gvt$state))) # extract 2-digit state code
#### Code Dummies from Gvt Response Data ####
ggl$soe <- 0
ggl$shltr <- 0
ggl$shltrLoc <- 0
ggl$bus <- 0
maxDate <- max(ggl$date)
for (s in unique(states$state))  { # dont take states from google cause dont want Virgin Islands etc
soe <- as.Date(gvt[gvt$state==s,]$Date.of.SOE)
shltr <- gvt[gvt$state==s,]$Date.of.Stay.at.home
shltrLoc <- gvt[gvt$state==s,]$date.of.first.local.stay.at.home
bus <- gvt[gvt$state==s,]$Date.first.business.closure
# Code Dummies
if (!is.na(soe) & soe <= (maxDate)) {
ggl[ggl$state==s & ggl$date >= soe,]$soe <- 1 # dummy is 1 from day that measure was implemented
}
if (!is.na(shltr) & shltr <= (maxDate)) {
ggl[ggl$state==s & ggl$date >= shltr,]$shltr <- 1 # dummy is 1 from day that measure was implemented
}
if (!is.na(shltrLoc) & shltrLoc <= (maxDate)) {
ggl[ggl$state==s & ggl$date >= shltrLoc,]$shltrLoc <- 1 # dummy is 1 from day that measure was implemented
}
if (!is.na(bus) & bus <= (maxDate)) {
ggl[ggl$state==s & (ggl$date >= bus),]$bus <- 1 # dummy is 1 from day that measure was implemented
}
}
gvt <- gvt %>% dplyr::select(state,"Date.of.SOE","date.of.first.local.stay.at.home","Date.of.Stay.at.home", "Date.first.business.closure")
ggl <- plyr::join(ggl,gvt)
## School Closures
school <-fread(file.path(datain, "school_clsures", "coronavirus-school-closures-data.csv"),skip=1,sep=";")  %>% data.frame()
school <- data.frame(school)
school$State.Closure.Start.Date <- as.Date(school$State.Closure.Start.Date, "%d/%m/%Y")
colnames(school)[colnames(school)=="State.Abbreviation"] <- "state"
ggl <- plyr::join(ggl,school,match="all",type="left") # merge
## Code School Dummies
ggl$school <- NA
ggl[(ggl$date < ggl$State.Closure.Start.Date) & !is.na(ggl$State.Closure.Start.Date),]$school <- 0
ggl[(ggl$date >= ggl$State.Closure.Start.Date) & !is.na(ggl$State.Closure.Start.Date),]$school <- 1
## US County-State Names
ggl$countyState <- paste(ggl$countyName, ggl$state,sep=", ")
# ## Fill in empty dates to get case data far out
#
# maxDate <- max(ggl$date)
#
# missingDates <- seq.Date(as.Date(maxDate) + 1, today(), by = 1)
# countyIds <- ggl[!duplicated(ggl$countyFIPS),] %>% dplyr::select(countyFIPS, countyState, state)
# emptyDates <- data.frame(countyFIPS = rep(countyIds$countyFIPS, length(missingDates)),
#                          countyState = rep(countyIds$countyState, length(missingDates)),
#                          state = rep(countyIds$state, length(missingDates)),
#                          date = rep(missingDates, dim(countyIds)[1]))
# ggl <- rbind.fill(ggl, emptyDates)
#### COVID data Johns Hopkins ####
for (i in c("deaths", "confirmed")) {
cov <- fread(file.path(datain, "covid_19","COVID-19-master","csse_covid_19_data","csse_covid_19_time_series",
paste("time_series_covid19",i,"US.csv",sep="_")))  %>% data.frame()
cov$Province_State <- as.character(cov$Province_State)
cov$Admin2 <- as.character(cov$Admin2)
cov <- cov[!(cov$Province_State %in% c("Grand Princess", "Diamond Princess")) & !(cov$Admin2=="Unassigned"),]
#cov <- cov[cov$FIPS < 80001,] # drop unassigned and out of state cases
# prepare for reshaping
colnames(cov) <- gsub("X","0",colnames(cov))
cov$Lat <- NULL
cov$Long <- NULL
cov <- cov[cov$Country_Region=="US" & !is.na(cov$Province_State),] # take only US regions
cov <- cov[!grepl(",",cov$Province_State),] # drop the ones with a comma, which are counties
states <- data.frame(Province_State=state.name,state=state.abb) # these are built in datasets
states <- rbind(states, data.frame(Province_State="District of Columbia", state="DC"))
cov <- plyr::join(cov, states)
cov <- cov[!is.na(cov$state),] # drop cruise ships
cov <- cbind(cov %>% dplyr::select("Admin2"),cov[12:dim(cov)[2]])
colnames(cov)[colnames(cov)=="Admin2"] <- "countyName"
cov$countyName <- paste(cov$countyName, "County")
# reshape from wide to long
cov$countyState <- paste(cov$countyName, cov$state,sep=", ")
cov$state <- NULL
cov$countyName <- NULL
cov <- gather(cov, date, JH, -countyState)
colnames(cov)[colnames(cov)=="JH"] <- paste("JH", i, sep="_")
cov$date <- as.Date(cov$date,"%m.%d.%y")
# merge with master data
ggl <- plyr::join(ggl, cov,type="left", match="all")
fwrite(cov, file.path(dataout, paste("jh_c",i,sep="_")))
}
## US Wide
for (i in c("deaths", "confirmed")) {
cov <- fread(file.path(datain, "covid_19","COVID-19-master","csse_covid_19_data","csse_covid_19_time_series",
paste("time_series_covid19",i,"global.csv",sep="_"))) %>% data.frame()
cov$Country.Region <- as.character(cov$Country.Region)
cov <- cov[cov$Country.Region == "US",]
#cov <- cov[cov$FIPS < 80001,] # drop unassigned and out of state cases
# prepare for reshaping
colnames(cov) <- gsub("X","0",colnames(cov))
cov$Lat <- NULL
cov$Long <- NULL
cov$Province.State <- NULL
# reshape from wide to long
cov <- gather(cov, date, JH, -Country.Region)
colnames(cov)[colnames(cov)=="JH"] <- paste("JH", i, sep="_")
cov$date <- as.Date(cov$date,"%m.%d.%y")
cov$Country.Region <- NULL
colnames(cov)[2] <- paste(colnames(cov)[2], "US", sep="_")
# merge with master data
ggl <- plyr::join(ggl, cov,type="left", match="all")
fwrite(cov, file.path(dataout, paste("jh_us",i,sep="_")))
}
#### NYT Covid Data ####
## counties
nyt <- fread(file.path(datain, "NYT", "covid-19-data-master", "us-counties.csv"))  %>% data.frame()
nyt$county <- NULL
nyt$state <- NULL
nyt$date <- as.Date(nyt$date, "%Y-%m-%d")
colnames(nyt)[2:4] <- c("countyFIPS", "nyt_cases", "nyt_deaths")
ggl <- plyr::join(ggl, nyt)
## states
nyt <- fread(file.path(datain, "NYT", "covid-19-data-master", "us-states.csv"))  %>% data.frame()
nyt$county <- NULL
nyt$fips <- NULL
nyt$date <- as.Date(nyt$date, "%Y-%m-%d")
colnames(nyt)[2:4] <- c("State", "nyt_cases_s", "nyt_deaths_s")
ggl <- plyr::join(ggl,nyt)
ggl[is.na(ggl$nyt_cases_s),]$nyt_cases_s <- 0
ggl[is.na(ggl$nyt_deaths_s),]$nyt_deaths_s <- 0
## us
nyt <- fread(file.path(datain, "NYT", "covid-19-data-master", "us.csv"))  %>% data.frame()
nyt$date <- as.Date(nyt$date, "%Y-%m-%d")
colnames(nyt)[2:3] <- c("nyt_cases_us", "nyt_deaths_us")
ggl <- plyr::join(ggl,nyt)
#### NACO Counties' Policies ####
naco <- fread(file.path(datain, "Naco", "County_Declaration_and_Policies.csv"))  %>% data.frame()
colnames(naco)[colnames(naco)=="FIPS"] <- "countyFIPS"
naco$State <- NULL
naco$County <- NULL
naco$EMERGENCY.DECLARATION <- as.Date(naco$County.Emergency.Declaration.Date, "%Y-%m-%d")
naco$SAFER.AT.HOME.POLICY <- as.Date(naco$Safer.at.Home.Policy.Date,  "%Y-%m-%d")
naco$BUSINESS.CLOSURE.POLICY <- as.Date(naco$Business.Closure.Policy.Date,  "%Y-%m-%d")
naco <- naco %>% dplyr::select(EMERGENCY.DECLARATION, SAFER.AT.HOME.POLICY,
BUSINESS.CLOSURE.POLICY, countyFIPS)
maxDate <- max(ggl$date)
ggl <- plyr::join(ggl, naco)
ggl$naco_soe <- 0
ggl$naco_shltr <- 0
ggl$naco_bus <- 0
for (s in unique(naco[!is.na(naco$EMERGENCY.DECLARATION),]$countyFIPS))  { # dont take states from google cause dont want Virgin Islands etc
soe <- as.Date(naco[naco$countyFIPS==s,]$EMERGENCY.DECLARATION)
shltr <- as.Date(naco[naco$countyFIPS==s,]$SAFER.AT.HOME.POLICY)
bus <- as.Date(naco[naco$countyFIPS==s,]$BUSINESS.CLOSURE.POLICY)
# Code Dummies
if (!is.na(soe) & (soe <= (maxDate))) {
ggl[ggl$countyFIPS==s & ggl$date >= soe,]$naco_soe <- 1 # dummy is 1 from day that measure was implemented
}
if (!is.na(shltr) & (shltr <= (maxDate))) {
ggl[ggl$countyFIPS==s & ggl$date >= shltr,]$naco_shltr <- 1 # dummy is 1 from day that measure was implemented
}
if (!is.na(bus) & (bus <= (maxDate))) {
ggl[ggl$countyFIPS==s & (ggl$date >= bus),]$naco_bus <- 1 # dummy is 1 from day that measure was implemented
}
} # theres some warnings but too lazy to figure out why
## First Death and First Confirmed Case
# create identifiers for lag function
timevar <- as.numeric(factor(ggl$date),levels=unique(ggl$date))
idvar <- as.numeric(factor(ggl$countyFIPS),levels=unique(ggl$countyFIPS))
# first death
ggl$deathLag <- prodest::lagPanel(idvar, timevar, ggl$JH_deaths)
temp <- ggl[(ggl$deathLag==0) & (ggl$JH_deaths>0) & !is.na(ggl$deathLag) & !is.na(ggl$JH_deaths),] %>% dplyr::select(countyFIPS, date)
colnames(temp)[colnames(temp)=="date"] <- "firstDeath"
temp$firstDeath <- as.Date(temp$firstDeath, "%Y-%m-%d")
temp <- temp %>% group_by(countyFIPS) %>% dplyr::summarise(firstDeath=min(firstDeath, na.rm=T)) # JH data is a bit messed up and sometimes decreases even though
# its supposed to be cumulative
ggl <- plyr::join(ggl,temp,match="all",type="left")
ggl$deathLag <- NULL
# ggl <- ggl[!duplicated(ggl %>% dplyr::select(countyState, date)),] # stupid duplicates keep reappearing but still lazy
# first case
ggl$caseLag <- prodest::lagPanel(idvar, timevar, ggl$JH_confirmed)
ggl$JH_ConfDiff <- ggl$JH_confirmed - ggl$caseLag
ggl[ggl$JH_ConfDiff < 0 & !is.na(ggl$JH_ConfDiff),]$JH_confirmed <- ggl[ggl$JH_ConfDiff < 0 & !is.na(ggl$JH_ConfDiff),]$caseLag
ggl$caseLag <- prodest::lagPanel(idvar, timevar, ggl$JH_confirmed)
ggl$JH_ConfDiff <- ggl$JH_confirmed - ggl$caseLag
temp <- ggl[(ggl$caseLag==0) & (ggl$JH_confirmed>0) & !is.na(ggl$caseLag) & !is.na(ggl$JH_confirmed),] %>% dplyr::select(countyFIPS, date)
colnames(temp)[colnames(temp)=="date"] <- "firstCase"
temp$firstCase <- as.Date(temp$firstCase, "%Y-%m-%d")
temp <- temp %>% group_by(countyFIPS) %>% dplyr::summarise(firstCase=min(firstCase, na.rm=TRUE)) # JH data is a bit messed up and sometimes decreases even though
# its supposed to be cumulative
ggl <- plyr::join(ggl,temp,match="all",type="left")
ggl$caseLag <- NULL
ggl$firstCase <- as.Date(ggl$firstCase, "%Y-%m-%d")
#### Demographics ####
## 2016 Election Votes
votes <- fread(file.path(datain, "counties", "countypres_2000-2016.csv"))  %>% data.frame()
votes <- votes[votes$year == 2016,]
votes <- votes[!votes$candidate=="Other",]
votes$voteShare <- votes$candidatevotes / votes$totalvotes
colnames(votes)[colnames(votes)=="FIPS"] <- "countyFIPS"
votes <- votes %>% dplyr::select(countyFIPS, party, candidatevotes, voteShare)
votes <- votes[!is.na(votes$countyFIPS),]
votes <- votes %>% pivot_wider(names_from=party, values_from=c(voteShare,candidatevotes))
votes$total <- votes$candidatevotes_democrat + votes$candidatevotes_republican
votes$democrat <- votes$candidatevotes_democrat / votes$total
votes$republican <- votes$candidatevotes_republican / votes$total
votes <- votes %>% dplyr::select(countyFIPS, democrat, republican)
ggl <- plyr::join(ggl, votes)
## Education
edu <- fread(file.path(datain, "counties", "Education.csv"))  %>% data.frame()
edu <- edu %>% dplyr::select(X2013.Rural.urban.Continuum.Code, Percent.of.adults.with.a.bachelor.s.degree.or.higher..1990,
Percent.of.adults.completing.some.college.or.associate.s.degree..1990, FIPS.Code)
colnames(edu)[colnames(edu)=="FIPS.Code"] <- "countyFIPS"
ggl <- plyr::join(ggl, edu)
## Unemployment
une <- fread(file.path(datain, "counties", "Unemployment.csv"))  %>% data.frame()
une <- une %>% dplyr::select(Median_Household_Income_2018, Unemployment_rate_2018, FIPS)
colnames(une)[colnames(une)=="FIPS"] <- "countyFIPS"
ggl <- plyr::join(ggl, une)
## Quarterly Census of Employment and Wages
## Total Employment
ind <- fread(file.path(datain, "counties", "qcew", "2019_qtrly_by_industry", "2019.q1-q3.by_industry", "2019.q1-q3 10 10 Total, all industries.csv"))  %>% data.frame()
ind <- ind[ind$qtr==3,]
ind <- ind[ind$own_title=="Private",]
ind <- ind[ind$agglvl_code==71,] # only counties
ind$emp193_tot <- ind$month1_emplvl + ind$month2_emplvl+ ind$month3_emplvl
ind <- ind %>% dplyr::select(area_fips, emp193_tot)
colnames(ind)[colnames(ind)=="area_fips"] <- "countyFIPS"
ind$countyFIPS <- as.numeric(as.character(ind$countyFIPS))
ggl <- plyr::join(ggl, ind)
## Employment Industries
# Manufacturing
ind <- fread(file.path(datain, "counties", "qcew", "2019_qtrly_by_industry", "2019.q1-q3.by_industry", "2019.q1-q3 31-33 NAICS 31-33 Manufacturing.csv"))  %>% data.frame()
ind <- ind[ind$qtr==3,]
ind <- ind[ind$own_title=="Private",]
ind <- ind[ind$agglvl_code==74,] # only counties
ind$emp193_manu <- ind$month1_emplvl + ind$month2_emplvl+ ind$month3_emplvl
ind <- ind %>% dplyr::select(area_fips, emp193_manu)
colnames(ind)[colnames(ind)=="area_fips"] <- "countyFIPS"
ind$countyFIPS <- as.numeric(as.character(ind$countyFIPS))
ggl <- plyr::join(ggl, ind)
# Accommodation and food
ind <- fread(file.path(datain, "counties", "qcew", "2019_qtrly_by_industry", "2019.q1-q3.by_industry", "2019.q1-q3 72 NAICS 72 Accommodation and food services.csv"))  %>% data.frame()
ind <- ind[ind$qtr==3,]
ind <- ind[ind$own_title=="Private",]
ind <- ind[ind$agglvl_code==74,] # only counties
ind$emp193_hosp <- ind$month1_emplvl + ind$month2_emplvl+ ind$month3_emplvl
ind <- ind %>% dplyr::select(area_fips, emp193_hosp)
colnames(ind)[colnames(ind)=="area_fips"] <- "countyFIPS"
ind$countyFIPS <- as.numeric(as.character(ind$countyFIPS))
ggl <- plyr::join(ggl, ind)
ggl$emp_manuShare <- ggl$emp193_manu / ggl$emp193_tot
ggl$emp_hospShare <- ggl$emp193_hosp / ggl$emp193_tot
ggl[ggl$emp193_tot == 0 & !is.na(ggl$emp193_tot),]$emp_manuShare <- 0 # null is null!!
ggl[ggl$emp193_tot == 0 & !is.na(ggl$emp193_tot),]$emp_hospShare <- 0
## Belief in Climate Change
clim <- fread(file.path(datain, "cc_denial", "raw", "YCOM_2019_Data.csv"))  %>% data.frame()
clim <- clim[clim$GeoType=="County",]
colnames(clim)[colnames(clim)=="GEOID"] <- "countyFIPS"
clim <- clim %>% dplyr::select(countyFIPS, happening, happeningOppose, human, humanOppose)
ggl <- plyr::join(ggl, clim)
## Gini Coefficient (source: data.census.gov - all counties only available for 5-year estimates 2018)
gini <- fread(file.path(datain, "counties", "gini", "gini.csv"))  %>% data.frame()
gini$countyFIPS <- as.numeric(substr(gini$GEO_ID, nchar(as.character(gini$GEO_ID))-4, nchar(as.character(gini$GEO_ID))))
gini <- gini[-1,] # drop description row
colnames(gini)[colnames(gini)=="B19083_001E"] <- "gini"
gini <- gini %>% dplyr::select(gini, countyFIPS)
gini$gini <- as.numeric(as.character(gini$gini))
ggl <- plyr::join(ggl, gini)
## Social Capital Stuff
cpt <- fread(file.path(datain, "social_capital", "social-capital-project-social-capital-index-data.csv"),skip=2,sep=";")  %>% data.frame()
cpt <- cpt %>% dplyr::select(FIPS.Code, Institutional.Health, Community.Health)
colnames(cpt)[1] <- c("countyFIPS")
ggl <- plyr::join(ggl,cpt)
#### County Social Capital Benchmarks ####
bench <- fread(file.path(datain, "social_capital", "social-capital_county-benchmarks.csv"), skip=2, sep=";")  %>% data.frame()
bench$County..State <- NULL
bench$State <- NULL
bench$State.Abbreviation <- NULL
bench$County <- NULL
bench$County..State.Abbreviation <- NULL
bench$X <- NULL
colnames(bench) <- paste("socCap", colnames(bench), sep="_")
colnames(bench)[1] <- "countyFIPS"
ggl <- plyr::join(ggl, bench)
colnames(ggl)[colnames(ggl)=="JH_deaths"] <- "JH_Deaths"
colnames(ggl)[colnames(ggl)=="JH_confirmed"] <- "JH_Confirmed"
#### County Social Capital Index ####
bench <- readxl::read_excel(file.path(datain, "social_capital", "social-capital-project-social-capital-index-data.xlsx"),
sheet = "County Index Indicators", range = "A3:N3145")  %>% setDT()
bench <- bench[,c(1,14)]
colnames(bench) <- c("countyFIPS", "religion")
ggl <- plyr::join(ggl, bench)
## State-Level Population
pop <- fread(file.path(datain, "nst-est2019-alldata.csv"))  %>% data.frame()
pop <- pop %>% dplyr::select(NAME, POPESTIMATE2019)
colnames(pop) <- c("State", "pop_s19")
ggl <- plyr::join(ggl, pop)
## Pew Values Survey ##
pew <- foreign::read.dta(file.path(datain, 'pew_science', "Values Survey Combined Dataset, 1987-2012.DTA")) %>% setDT()
pew <- pew[!is.na(scihurt), c("fips", "scihurt", "partysum", "weight")]
pew[, countyFIPS := str_pad(fips, 5, 'left', '0')]
# plot densities
dens <- pew[, .(n = sum(weight)), by = c("partysum", "scihurt")]
dens <- dens[scihurt != "Don't know"]
dens[, partynum := sum(n), by = "partysum"]
dens[, share := n / partynum]
ggplot(dens, aes(scihurt, share, fill=partysum)) +
geom_col(position = 'dodge') +
scale_fill_manual(values = c('red', 'blue', "grey"))
#geom_vline(data=pew, aes(xintercept=grp.median, color=rep), linetype="dashed") +
theme(text = element_text(family = 'CM Roman')) +
xlab("Percent of Sample") +
ylab("Density")  +  theme(axis.title=element_text(size=14), axis.text=element_text(size=12)) +
scale_colour_manual(values = c("red", "blue", "grey")) +
scale_fill_manual(values = c("red", "blue", "grey")) +
theme(legend.position="none")
# get county to core based statistical area crosswalk (https://data.nber.org/data/cbsa-msa-fips-ssa-county-crosswalk.html)
cw <- fread(file.path(datain, "pew_science", "cbsatocountycrosswalk2016.csv"))
cw <- cw[, countyFIPS := str_pad(fipscounty, 5, 'left', '0')]
cw <- cw[,c("cbsa", "countyFIPS")]
pew <- cw[pew, on = "countyFIPS"]
pew <- pew[, proScience := as.numeric(scihurt %in% c("Mostly disagree", "Completely disagree"))]
pew[, cbsa_pop_raw := .N, by = "cbsa"]
pew[, cbsa_pop := sum(weight), by = "cbsa"]
pew[, sci_share_cbsa := sum(proScience * weight / cbsa_pop), by = "cbsa"]
pewplot <- pew[partysum != "No leaning"]
# plot density of "pro science" shares by cbsa
ggplot(pewplot, aes(x=sci_share_cbsa, fill=partysum)) + geom_density(alpha=0.4) +
#geom_vline(data=mu, aes(xintercept=grp.median, color=rep), linetype="dashed") +
theme(text = element_text(family = 'CM Roman')) +
xlab("Percent of County") +
ylab("Density")  +  theme(axis.title=element_text(size=14), axis.text=element_text(size=12)) +
scale_colour_manual(values = c("blue", "red")) +
scale_fill_manual(values = c("blue", "red")) +
theme(legend.position="none")
# masks data
masks <- fread(file.path(datain, 'masks', 'mask-use-by-county.csv'))
cols_change <- colnames(masks[,-c("COUNTYFP")]) # get colnames to change
setnames(masks, c(cols_change, "COUNTYFP"), c(paste0("masks_", cols_change), "countyFIPS"))
masks[, masks_ANY := masks_SOMETIMES + masks$masks_FREQUENTLY + masks$masks_ALWAYS]
ggl <- plyr::join(ggl, masks)
# "aggregate" pew to county level
pew <- unique(pew, by = "countyFIPS")
# merge into main data
ggl$countyFIPS <- str_pad(ggl$countyFIPS, 5, 'left', '0')
ggl <- plyr::join(ggl, pew)
# check whether panel is balanced
testit::assert(dim(unique(ggl, by = c("countyFIPS", "date"))) == dim(ggl))
#ggl <- unique(ggl, by = c("countyState", "date"))
#### Write to File ####
fwrite(ggl,file.path(dataout,"COVID_County.csv"))
#****************************************************************************************************************************************************
# MASTER FILE: "Belief in Science Influences "
# Adam Brzeszinski, Valentin Kecht, Guido Deieana, David Van Dijcke
#****************************************************************************************************************************************************
#### SET PARAMETERS <- SET YOURSELF ####
stataVersion <- 16 # set to whichever stata version you're using
rm(list = ls()) # clear
#### SET PATHS ####
if (!require("here", character.only=T)) {install.packages("here", dependencies=TRUE)}; require("here")
mkdir=sub("/programs", "", here::here())
setwd(file.path(mkdir,"programs"))
sg_path <- file.path("/home/antonvocalis/Dropbox (University of Michigan)/Documents/Corona/Corona/raw/2020")
datain = file.path(mkdir, "raw", "in") # alter this if different file structure
dataout = file.path(mkdir, "raw/out")
tabs = file.path(mkdir, "results/tabs")
figs = file.path(mkdir, "results/figs")
#### SOURCE SCRIPTS ####
source("00_prep.R") # load libraries etc
source("01_fts.R") # load self-written functions
#("11_safeGraphSDCounty.R") # get safeGraph data and aggregate it (uncomment to do again - !!TAKES A WHILE)
#source("12_compileDataCounty.R") # get data from all different sources - redo if any data changes, doesnt take long
# saves compiled "COVID.csv" to out folder
ggl <- fread(file.path(dataout, "COVID_County.csv"))
wants <- c("tibble", "gdata", "reshape2", "dplyr", "stargazer",
"zoo", "lubridate", "datetime", "plyr",  "foreach", "ggplot2", "extrafont",
"data.table",  "here", "devtools",  "urca", "openintro", "RcmdrMisc",
"purrr",  "pracma",  "RStata", "sandwich",
"readxl", "tidyr", "scales", "grid", "schoolmath", "gridExtra", "AER",
"foreign", "stringr", "testit", "renv")
if (!require("pacman")) install.packages("pacman", dependencies = TRUE)
pacman::p_load(char = wants, character.only = TRUE)
RStata::chooseStataBin()
OS <- Sys.info()["sysname"]
OS.type <- .Platform$OS.type
m <- c(`Stata MP` = "stata-mp",
`Stata SE` = "stata-se",
`Stata IC` = "stata",
`Small Stata` = "stata-sm" )
bin <- Sys.which(m)
names(bin) <- names(m)
nApps <- length(availProg <- bin[ "" != bin])
nApps
utils::menu(names(availProg), title = "Stata availables")
res <- utils::menu(names(availProg), title = "Stata availables")
res
availProg
availProg['Stata IC']
#extract legend
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
## Transparent colors
## Mark Gardener 2015
## www.dataanalytics.org.uk
t_col <- function(color, percent = 50, name = NULL) {
#      color = color name
#    percent = % transparency
#       name = an optional name for the color
## Get RGB values for named color
rgb.val <- col2rgb(color)
## Make new color using input color as base and alpha set by transparency
t.col <- rgb(rgb.val[1], rgb.val[2], rgb.val[3],
max = 255,
alpha = (100 - percent) * 255 / 100,
names = name)
## Save the color
invisible(t.col)
}
## END
# function to lag variables within a panel #
lagPanel <- function( idvar, timevar, value, suffix = '',lags=1 ){
df <- data.frame( idvar, timevar, value)
last.time <- df %>% dplyr::filter(!is.na(timevar)) %>%
dplyr::mutate(timevar = timevar + lags, lagged_value = value, value = NULL)
out <- as.matrix(df %>% dplyr::left_join(last.time, by = c("idvar", "timevar")))[,4]
colnames( out ) <- NULL
return( out )
}
# end of lag panel #
# function to lead variables within a panel #
leadPanel <- function( idvar, timevar, value, suffix = '',lags=1 ){
df <- data.frame( idvar, timevar, value)
last.time <- df %>% dplyr::filter(!is.na(timevar)) %>%
mutate(timevar = timevar - lags, lagged_value = value, value = NULL)
out <- as.matrix(df %>% left_join(last.time, by = c("idvar", "timevar")))[,4]
colnames( out ) <- NULL
return( out )
}
# end of lead panel #
#' Set Stata binary path (adapted so it always chooses Stata SE in Linux)
#'
#' Set Stata binary (among found alternatives) path. These settings are
#' lost when R is closed, therefore you should consider adding a
#' \code{options("RStata.StataPath")} line in your \code{.Rprofile}.
#'
#' @export
chooseStataBin2 <- function()
{
OS <- Sys.info()["sysname"]
OS.type <- .Platform$OS.type
## ------------------------------
if (OS %in% "Linux") {
m <- c(`Stata MP` = "stata-mp",
`Stata SE` = "stata-se",
`Stata IC` = "stata",
`Small Stata` = "stata-sm" )
bin <- Sys.which(m)
names(bin) <- names(m)
nApps <- length(availProg <- bin[ "" != bin])
if (0 == nApps) {
stop("No application (detected) availables.\n",
"Set options('RStata.StataPath'), instead." )
}  else if (nApps >= 1) {
unnprog <- unname(availProg['Stata SE'])
options(RStata.StataPath = unnprog)
return(unnprog)
} else {
stop("Unexpected error")
}
## ------------------------------
} else if (OS %in% "Windows"){
prog <- file.choose()
prog <- shQuote(tools::file_path_sans_ext(prog))
options(RStata.StataPath = prog)
return(prog)
} else {
""
}
}
RStata::chooseStataBin2()
chooseStataBin2()
options("RStata.StataPath"= chooseStataBin2())
options("RStata.StataVersion" = 16)
